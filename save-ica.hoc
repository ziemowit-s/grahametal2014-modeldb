objref cai_vec, time_vec
objref cai_shead_file, cai_shead_list, cai_shead_list
objref cai_sneck_file, cai_sneck_list, cai_shead_list
objref sh, ca_shead, ca_sneck, ca_stim

ca_shead = new SectionList()
ca_sneck = new SectionList()

time_vec = new Vector()
time_vec.record(&t)

cai_shead_file = new File()
cai_shead_list = new List()

cai_sneck_file = new File()
cai_sneck_list = new List()

proc record_spines() {local i, index
    print "preparing ica recording for spine heads:"
    for (i=0; i < spines_to_stim_len; i=i+1) {
        index = spines_to_stim_indexes.x[i]
        cell.shead[index] for (x) {
            print secname(), x
            cai_vec = new Vector()
            cai_vec.record(&cai(x))
            cai_shead_list.append(cai_vec)
        }
    }

    print "preparing ica recording for spine necks:"
    for (i=0; i < spines_to_stim_len; i=i+1) {
        index = spines_to_stim_indexes.x[i]
        cell.sneck[index] for (x) {
            print secname(), x
            cai_vec = new Vector()
            cai_vec.record(&cai(x))
            cai_sneck_list.append(cai_vec)
        }
    }
}

record_spines()

strdef srec
proc save_shead_cai() {local i, ii, index, current_seg, spines_number
    // $1: string path to save the file
    // $2: number of segments in spine head
    // return: saved value in mM
    print "saving ica for spine heads [all segments]:"
	cai_shead_file.wopen($s1)
	current_seg = -1
	all_segmenst_num = cai_shead_list.count()
	number_of_spines = all_segmenst_num/$2

	for i=0, cai_shead_list.count()-1 {
        if(i%number_of_spines == 0) {
            current_seg += 1
        }
	    index = spines_to_stim_indexes.x[i%spines_to_stim_len]
        cell.shead[index] {
            sprint(srec, "%s.%.1f:", secname(), current_seg/($2-1))
        }
        print srec
        cai_shead_file.printf(srec)
        for ii=0, time_vec.size()-1 {
            cai_shead_file.printf(" %g", cai_shead_list.o(i).x(ii))
        }
        cai_shead_file.printf("\n")
	}
	cai_shead_file.close()
}

proc save_sneck_cai() {local i, ii, index, current_seg, spines_number
    // $1: string path to save the file
    // $2: number of segments in spine neck
    // return: saved value in mM
    print "saving ica for spine necks [all segments]:"
	cai_sneck_file.wopen($s1)
	current_seg = -1
	all_segmenst_num = cai_sneck_list.count()
	number_of_spines = all_segmenst_num/$2

	for i=0, cai_sneck_list.count()-1 {
        if(i%number_of_spines == 0) {
            current_seg += 1
        }
	    index = spines_to_stim_indexes.x[i%spines_to_stim_len]
        cell.sneck[index] {
            sprint(srec, "%s.%.1f:", secname(), current_seg/($2-1))
        }
        print srec
        cai_sneck_file.printf(srec)
        for ii=0, time_vec.size()-1 {
            cai_sneck_file.printf(" %g", cai_sneck_list.o(i).x(ii))
        }
        cai_sneck_file.printf("\n")
	}
	cai_sneck_file.close()
}