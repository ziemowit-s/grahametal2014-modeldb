objref shead_cai_vec, sneck_cai_vec, apical_cai_vec, time_vec
objref cai_shead_file, cai_shead_list, cai_shead_list
objref cai_sneck_file, cai_sneck_list, cai_shead_list
objref cai_apical_file, cai_apical_list, cai_apical_list

time_vec = new Vector()
time_vec.record(&t)

cai_shead_file = new File()
cai_shead_list = new List()

cai_sneck_file = new File()
cai_sneck_list = new List()

cai_apical_file = new File()
cai_apical_list = new List()

proc record_spines() {local i, index
    print "preparing cai recording for spine heads:"
    for (i=0; i < spines_to_stim_len; i=i+1) {
        index = spines_to_stim_indexes.x[i]
        cell.shead[index] for (x) {
            print "recording:", secname(), x
            shead_cai_vec = new Vector()
            shead_cai_vec.record(&cai(x))
            cai_shead_list.append(shead_cai_vec)
        }
    }

    print "preparing cai recording for spine necks:"
    for (i=0; i < spines_to_stim_len; i=i+1) {
        index = spines_to_stim_indexes.x[i]
        cell.sneck[index] for (x) {
            print secname(), x
            sneck_cai_vec = new Vector()
            sneck_cai_vec.record(&cai(x))
            cai_sneck_list.append(sneck_cai_vec)
        }
    }
    
    print "preparing cai recording for spines' dendrites:"
    for (i=0; i < spines_to_stim_len; i=i+1) {
        index = apical_to_stim_indexes.x[i]
        cell.apical_dend[index] for (x) {
            print secname(), x
            apical_cai_vec = new Vector()
            apical_cai_vec.record(&cai(x))
            cai_apical_list.append(apical_cai_vec)
        }
    }
}

record_spines()

strdef srec
proc save_shead_cai() {local i, ii, index, current_seg, cai_shead_list_index
    // $1: string path to save the file
    // return: saved value in mM
    print "saving cai for spine heads [all segments]:"
	cai_shead_file.wopen($s1)
	current_seg = -1

    cai_shead_list_index = -1
	for (i=0; i < spines_to_stim_len; i=i+1) {
	    index = spines_to_stim_indexes.x[i]

	    cai_shead_file.printf("Compartment and Segment")
	    for ii=0, time_vec.size()-1 {
            cai_shead_file.printf(",%f", time_vec.x(ii))
        }
        cai_shead_file.printf("\n")

	    cell.shead[index] for (x) {
	        cai_shead_list_index += 1
            sprint(srec, "%s.%.1f", secname(), x)
            print srec

            cai_shead_file.printf(srec)
            for ii=0, time_vec.size()-1 {
                cai_shead_file.printf(",%g", cai_shead_list.o(cai_shead_list_index).x(ii))
            }
            cai_shead_file.printf("\n")
        }
	}
	cai_shead_file.close()
}

proc save_sneck_cai() {local i, ii, index, current_seg, cai_sneck_list_index
    // $1: string path to save the file
    // return: saved value in mM
    print "saving cai for spine necks [all segments]:"
	cai_sneck_file.wopen($s1)
	current_seg = -1

    cai_sneck_list_index = -1
	for (i=0; i < spines_to_stim_len; i=i+1) {
	    index = spines_to_stim_indexes.x[i]

	    cai_sneck_file.printf("Compartment and Segment")
	    for ii=0, time_vec.size()-1 {
            cai_sneck_file.printf(",%f", time_vec.x(ii))
        }
        cai_sneck_file.printf("\n")

	    cell.sneck[index] for (x) {
	        cai_sneck_list_index += 1
            sprint(srec, "%s.%.1f", secname(), x)
            print srec

            cai_sneck_file.printf(srec)
            for ii=0, time_vec.size()-1 {
                cai_sneck_file.printf(",%g", cai_sneck_list.o(cai_sneck_list_index).x(ii))
            }
            cai_sneck_file.printf("\n")
        }
	}
	cai_sneck_file.close()
}

proc save_apical_cai() {local i, ii, index, current_seg, cai_apical_list_index
    // $1: string path to save the file
    // return: saved value in mM
    print "saving cai for apical dendrites [all segments]:"
	cai_apical_file.wopen($s1)
	current_seg = -1

    cai_apical_list_index = -1
	for (i=0; i < spines_to_stim_len; i=i+1) {
	    index = apical_to_stim_indexes.x[i]

	    cai_apical_file.printf("Compartment and Segment")
	    for ii=0, time_vec.size()-1 {
            cai_apical_file.printf(",%f", time_vec.x(ii))
        }
        cai_apical_file.printf("\n")

	    cell.apical_dend[index] for (x) {
	        cai_apical_list_index += 1
            sprint(srec, "%s.%.1f", secname(), x)
            print srec

            cai_apical_file.printf(srec)
            for ii=0, time_vec.size()-1 {
                cai_apical_file.printf(",%g", cai_apical_list.o(cai_apical_list_index).x(ii))
            }
            cai_apical_file.printf("\n")
        }
	}
	cai_apical_file.close()
}
